/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
	id "de.undercouch.download" version "3.1.2"
	id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

ext {
	cucumberVersion = '1.2.5'
	junitVersion = '5.6.2'
	junitRunnerVersion = '1.6.2'
	rerunnerJunitVersion = '2.1.6'
	mockitoVersion = '2.10.0'
	seleniumCommonsVersion = '4.0.0'
	seleniumVersion = '3.3.1'
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
	compile 'com.selenium.commons:selenium-commons:' + seleniumCommonsVersion

	compile 'info.cukes:cucumber-java:' + cucumberVersion
	compile 'info.cukes:cucumber-junit:' + cucumberVersion
	
	compile group: 'org.junit.jupiter', name: 'junit-jupiter', version:junitVersion
	compile group: 'org.junit.platform', name: 'junit-platform-runner', version:junitRunnerVersion
	compile group: 'io.github.artsok', name: 'rerunner-jupiter', version:rerunnerJunitVersion

	compile group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'

	compile group: "org.mockito", name: "mockito-core", version: mockitoVersion
	
	compile 'org.seleniumhq.selenium:selenium-api:' + seleniumVersion
	compile 'org.seleniumhq.selenium:selenium-java:' + seleniumVersion
	compile 'org.seleniumhq.selenium:selenium-remote-driver:' + seleniumVersion
	compile 'org.seleniumhq.selenium:selenium-support:' + seleniumVersion
}

// Test LOG
tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
  dependsOn 'cleanTest'
}

// unit test settings
sourceSets {
  test {
    java {
      srcDir 'src/main'
      srcDir 'src/test'
    }
  }
}

task setupTestToRunIntoGoogleChrome {
    description 'Create the Tests properties and Chrome Driver.'
    group 'setup test samples'

	doLast {
		def baseDir =  "${project.hasProperty('liferay.workspace.home.dir') ? project.property('liferay.workspace.home.dir') : 'src' }"
		def SeleniumPropertyKeysPath = new File( 'SeleniumProperties' )
		def SeleniumPropertyKeysFile = new File( 'SeleniumProperties/SeleniumPropertyKeys.properties' )

		if( !SeleniumPropertyKeysFile.exists() ) {
			println "Create Configuration for use a local SeleniumPropertyKeys.properties"
			SeleniumPropertyKeysPath.mkdirs()
			SeleniumPropertyKeysFile.withWriterAppend { w ->
				w <<  "browser=defaultGC\ntime-out=10"
			}
		} else {
			println "You already had the local SeleniumPropertyKeys.properties created"
		}
		
		if ( (Os.isFamily(Os.FAMILY_WINDOWS)) && (!new File( baseDir + '/SeleniumProperties/chromedriver.exe').exists()) ) {
			println "Create Configuration for Windows to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_win32.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_win32.zip')
			}

			copy {
				def DriverPath = new File ('/SeleniumProperties/')
				from zipTree('/SeleniumProperties/chromedriver_win32.zip')
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_win32.zip'

		} else if ( (Os.isFamily(Os.FAMILY_MAC)) && (!new File( baseDir + '/SeleniumProperties/chromedriver').exists()) ) {
			println "Create Configuration for Mac to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_mac64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_mac64.zip')
			}
            
			copy {
				def DriverPath = new File ('/SeleniumProperties/')
				from zipTree('SeleniumProperties/chromedriver_mac64.zip')
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_mac64.zip'

		} else if ( (Os.isFamily(Os.FAMILY_UNIX)) && (!new File( baseDir + '/SeleniumProperties/chromedriver').exists()) ) {
			println "Create Configuration for Unix to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_linux64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_linux64.zip')
			}

			copy {
				from zipTree(new File('SeleniumProperties/', 'chromedriver_linux64.zip'))
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_linux64.zip'
		  } else {
			println "You already had the local Google Chrome Driver created"
		}
	}
}